library(tidyverse)
library(dplyr)
library(car)
library(caret)
library(corrplot)
library(survival)
library(OneR)
library(survAUC)

# 2. Import data ----

LoanData <- read_csv("Data/LoanData (2).zip")

# 3. Data Pre-processing ----

# Select required columns
survdata <- LoanData[c(1,2,10,12,13,16,19,21,23,24,25,27,28,29,32,34,36,49,65,68,79,85,93,94)]


#calculating the time period of survival for each loans

#Changing the Status to binary : Default loans to 1 and repaid, current loans to 0.

# time period for the defaulted loans

time_1 <- survdata %>%
  filter(!is.na(DefaultDate)) %>%
  mutate (Time = as.numeric( DefaultDate - LoanDate),
          Time = round(Time/(365.25/12)),    # substracting 2 to make true survival period
          Status = 1,
          State="Default") 


# time period for paid up loans  

time_2 <- survdata %>%
  filter(Status == 'Repaid' & is.na(DefaultDate)) %>%
  mutate (Time = as.numeric( ContractEndDate - LoanDate),
          Time = round(Time/(365.25/12)),
          Status = 0,
          State="Repaid")


#time period for the ongoing loans with status as current and no default dates
time_3 <- survdata %>%
  filter(Status == 'Current' & is.na(DefaultDate)) %>% 
  mutate(Time = as.numeric( ReportAsOfEOD - LoanDate),
         Time = round(Time/(365.25/12)),
         Status =0, 
         State="Current")


#time period for the ongoing loans with status as late and no default date
time_4 <- survdata %>%
  filter(Status == 'Late' & is.na(DefaultDate)) %>% 
  mutate(Time = as.numeric( ReportAsOfEOD - LoanDate),
         Time = round(Time/(365.25/12)),
         Status= 0,
         State="Current") 


#combining the data sets into single dataset having the survival times  

survival_data <- bind_rows(time_1,time_2,time_3,time_4)


summary(survival_data)

#removing observations with  0 values in EmploymentStatus variable and replacing -1 with 1 in 
#EmploymentStatus,UseofLoan and MaritalStatus

survival_data <- survival_data %>% 
  filter(EmploymentStatus != 0) %>% 
  mutate(EmploymentStatus = if_else(EmploymentStatus == -1, 1L, EmploymentStatus),
         UseOfLoan = if_else(UseOfLoan == -1, 1L, UseOfLoan),
         MaritalStatus = if_else(MaritalStatus == -1, 1L, MaritalStatus))

summary(survival_data)
str(survival_data)


#Binnig the Income to categorica variable

survival_data$IncomeTotal <- bin(survival_data$IncomeTotal, nbins = 3, 
                                 labels = c('low','middle','high'),
                                 method = 'content')

colSums(is.na(survival_data))

#Filling NAs in Rating as Missing

survival_data$Rating <- ifelse(is.na(survival_data$Rating)== T, 'Missing',survival_data$Rating)


#Changing categorical variables to factors

survival_data$VerificationType <- factor(survival_data$VerificationType,
                                         levels = c('1','2','3','4'),
                                         labels = c('Income unverified','cross-referenced by phone',
                                                    'Income verified','Income and expenses verified'))
survival_data$Gender <- factor(survival_data$Gender,
                               levels = c('0','1','2'),
                               labels = c('Male','Female','Undefined'))

survival_data$Country <- factor(survival_data$Country,
                                levels = c('EE','ES','FI','SK'),
                                labels = c('Estonia','Spain','Finland','Slovakia'))


survival_data$UseOfLoan <- factor(survival_data$UseOfLoan,
                                  levels = c('0','1','2','3','4','5','6','7','8'),
                                  labels = c('Loan consolidation','Real estate','Home improvement',
                                             'Business','Education','Travel','Vehicle','Other','Health'))


survival_data$MaritalStatus <- factor(survival_data$MaritalStatus,
                                      levels = c('1','2','3','4','5'),
                                      labels = c('Married','Cohabitant','Single','Divorced','Widow'))


survival_data$EmploymentStatus <- factor(survival_data$EmploymentStatus,
                                         levels = c('1','2','3','4','5','6'),
                                         labels = c(' Unemployed', 'Partially employed','Fully employed','Self-employed',
                                                    'Entrepreneur','Retiree'))
survival_data$NewCreditCustomer <- factor(survival_data$NewCreditCustomer,
                                          levels = c('False','True'),
                                          labels = c('No','Yes'))


survival_data$Rating <- as.factor(survival_data$Rating)

levels(survival_data$Rating)

#checking NAs
colSums(is.na(survival_data))

#Removing observations with NAs in Time variable
survival_data <- survival_data[!is.na(survival_data$Time),]

colSums(is.na(survival_data))


# 4. Exponential model ----

#changing survival time of 0 to 1

#survival_data$Time <- ifelse(survival_data$Time == 0,1, survival_data$Time)

# Equally distributing the events at period 4 between 1 to 4

n <- dim(survival_data)[1]
small_time <- sample( 4,size=n,replace = T, p=c(0.25,0.25,0.25,0.25))
survival_data$Time <- ifelse(survival_data$Time <= 4, small_time, survival_data$Time)

# Limiting survival time to 60

t <- 60
survival_data$Status <- ifelse(survival_data$Time > t, 0, survival_data$Status)
survival_data$Time <- ifelse(survival_data$Time > t, t, survival_data$Time)

#kaplan meier
#survival_data$Status <- ifelse(survival_data$Status == 0,1,0)

Kmcurve <- survfit(Surv(Time,Status)~ 1, data = survival_data)
plot(Kmcurve)
Kmcurve
summary(Kmcurve)


# 5. Time dependent auc ----

#shuffle survival data

survival_data <- survival_data[sample(1:nrow(survival_data)),]

N <- nrow(survival_data)

# iterating over different samples of original data (computing in batch size)

auc_uno_full <- numeric()  #store auc values

for (i in 1:30){
  
  # take a sample of original data
  
  exp_survival_data <- survival_data[sample(N,size=100),]
  
  # Partiton data into train and test set
  
  index <- sample(2,size= 100,replace=T,p=c(0.8,0.2))
  
  train_data <- exp_survival_data[index==1,]
  test_data <- exp_survival_data[index==2,]
  
  
  #fit exponential model on train data
  
  exp_fit <-survreg(Surv(Time, Status)~ NewCreditCustomer+VerificationType+Age+Gender+Country+
                      AppliedAmount+Interest+LoanDuration+UseOfLoan+MaritalStatus+EmploymentStatus+
                      IncomeTotal+Rating,
                    dist = "exponential", data = train_data)
  summary(exp_fit)
  
  #linear predictors on test data
  
  lp_train <- - predict(exp_fit,newdata = train_data,type = 'lp')
  lp_new <- - predict(exp_fit,newdata = test_data,type = 'lp')
  
  #creating surv object on train and test data
  
  Surv.rsp <- Surv(train_data$Time, train_data$Status)
  Surv.rsp.new <- Surv(test_data$Time,test_data$Status)
  
  
  Auc_uno <- AUC.uno(Surv.rsp = Surv.rsp,Surv.rsp.new = Surv.rsp.new, lpnew = lp_new, 
                     times =  seq(1,t,1))
  
  auc_uno_full[i] <- Auc_uno$iauc

avg_auc_full <- mean(auc_uno_full)
print (avg_auc_full)
}


#prediction error curve

BrierScore <- predErr(Surv.rsp, Surv.rsp.new, lp_train, lp_new, times= 0:t,
                      type = "brier",int.type = 'weighted')

BrierScore$error
BrierScore$ierror
plot(BrierScore)



# Exponential model with only Rating as explanatory variable


auc_uno_rating <- numeric()  #store auc values

for (i in 1:30){
  
  # take a sample of original data
  
  exp_survival_data <- survival_data[sample(N,size=1000),]
  
  # Partiton data into train and test set
  
  index <- sample(2,size= 1000,replace=T,p=c(0.8,0.2))
  
  train_data <- exp_survival_data[index==1,]
  test_data <- exp_survival_data[index==2,]
  
  
  #fit exponential model on train data
  
  exp_fit <-survreg(Surv(Time, Status)~ Rating,
                    dist = "exponential", data = train_data)
  summary(exp_fit)
  
  #linear predictors on test data
  
  lp_train <- - predict(exp_fit,newdata = train_data,type = 'lp')
  lp_new <- - predict(exp_fit,newdata = test_data,type = 'lp')
  
  #creating surv object on train and test data
  
  Surv.rsp <- Surv(train_data$Time, train_data$Status)
  Surv.rsp.new <- Surv(test_data$Time,test_data$Status)
  
  
  Auc_uno <- AUC.uno(Surv.rsp = Surv.rsp,Surv.rsp.new = Surv.rsp.new, lpnew = lp_new, 
                     times =  seq(1,t,1))
  
  auc_uno_rating[i] <- Auc_uno$iauc
  
avg_auc_rating <- mean(auc_uno_rating)
print(avg_auc_rating) 
}


# Exponential model with intercept only ----

auc_uno_intercept <- numeric()  #store auc values

for (i in 1:30){
  
  # take a sample of original data
  
  exp_survival_data <- survival_data[sample(N,size=10000),]
  
  # Partiton data into train and test set
  
  index <- sample(2,size= 10000,replace=T,p=c(0.8,0.2))
  
  train_data <- exp_survival_data[index==1,]
  test_data <- exp_survival_data[index==2,]
  
  
  #fit exponential model on train data
  
  exp_fit <-survreg(Surv(Time, Status)~ 1,
                    dist = "exponential", data = train_data)
  summary(exp_fit)
  
  #linear predictors on test data
  
  lp_train <- - predict(exp_fit,newdata = train_data,type = 'lp')
  lp_new <- - predict(exp_fit,newdata = test_data,type = 'lp')
  
  #creating surv object on train and test data
  
  Surv.rsp <- Surv(train_data$Time, train_data$Status)
  Surv.rsp.new <- Surv(test_data$Time,test_data$Status)
  
  
  Auc_uno <- AUC.uno(Surv.rsp = Surv.rsp,Surv.rsp.new = Surv.rsp.new, lpnew = lp_new, 
                     times =  seq(1,t,1))
  
  auc_uno_intercept[i] <- Auc_uno$iauc
  
avg_auc_intercept <- mean(auc_uno_intercept)
print(avg_auc_intercept)
}


# Profit calcultation


# Divide train and test sets

set.seed(123)
train_index <- createDataPartition(survival_data$Status, p=0.8, list = FALSE)

train_data <- survival_data[train_index,]
test_data <- survival_data[-train_index,]

#exponential model with train data

exp_train <- survreg(Surv(Time, Status)~ NewCreditCustomer+VerificationType+Age+Gender+Country+
                       AppliedAmount+Interest+LoanDuration+UseOfLoan+MaritalStatus+EmploymentStatus+
                       IncomeTotal+Rating,
                     dist = "exponential", data = train_data)
summary(exp_train)

# function to get the hazard rates and profit

get_Return <- function(model,data) {
  
  data <- data[which(!is.na(data$LossGivenDefault)),]
  h <- 1/predict(model, newdata = data, type='response')
  D <- -(data$LossGivenDefault)
  I <- (data$Interest/12)/100
  
  profit <- (h*(1+I)*(1+D)+(1-h)*(1+I))-1
  profit_yearly <- (profit)*12*100
  
  return(data.frame(hazard = h,return=profit_yearly)) 
  
}

#  calculating hazard rates and profit on train data

train_return <- get_Return(exp_train,train_data)
hist(train_return$return,breaks = 50, col="lightgreen")

#  calculate hazard rates and return for test data
test_return <- get_Return(exp_train,test_data)

hist(test_return$return, breaks = 50, col="lightgreen")



